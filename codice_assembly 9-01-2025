  Autore: 
;   Nicola Ferri, num. matricola:1109906
;   Marco Mazzarini, num. matricola: 1109734
;
;
;                             DESCRIZIONE
;   Si realizzi un firmware che faccia scorrere un LED acceso da destra a sinistra e 
;   viceversa; dei comandi ricevuti dalla porta seriale (USART) permettano di aumentare 
;   e diminuire la velocità di scorrimento, e arrestare e far ripartire il lampeggio.
;   Descrizione hardware:
;   - scheda Cedar "Pic Board - Studio" 
;   - MCU: PIC16F887 (clock interno 2 MHz)




PROCESSOR 16F887    ; direttiva che definisce il tipo di processore
#include <xc.inc>   ; file che contiene le definizioni dei simboli (nomi registri, nomi bit dei registri, ecc).
; configuration bits
CONFIG "FOSC = INTRC_NOCLKOUT"    ; Oscillatore interno abilitato, senza uscita clock
CONFIG "CP = OFF"                ; Protezione codice disabilitata
CONFIG "CPD = OFF"               ; Protezione dati EEPROM disabilitata
CONFIG "WDTE = OFF"              ; Watchdog Timer disabilitato
CONFIG "BOREN = OFF"             ; Brown-out Reset disabilitato
CONFIG "PWRTE = OFF"             ; Power-up Timer disabilitato
CONFIG "LVP = OFF"               ; Programmazione a bassa tensione disabilitata
CONFIG "DEBUG = OFF"             ; Debugger disabilitato
CONFIG "BOR4V = BOR21V"          ; Brown-out Reset a 2.1V
CONFIG "WRT = OFF"               ; Protezione scrittura Flash disabilitata

 
PSECT udata_shr                       ; direttiva che definisce una nuova sezione di memoria condivisa
; Variabili utilizzate per salvare lo stato della CPU all'ingresso dell'ISR
    w_temp:	     DS 1             ; Temporanea per il registro W
    status_temp:     DS 1             ; Temporanea per STATUS
    pclath_temp:     DS 1             ; Temporanea per PCLATH
    output_led:	     DS 1             ; variabile che conserva in memoria lo stato dei led
    direction:	     DS 1             ; variabile che conserva in memoria la direzione di scorrimento: 0 = direzione sinistra, 1=direzione destra
    tmp:	     DS 1
    pause_flag:	     DS 1             ; Flag di pausa (1 = pausa, 0 = rotazione)
    low_tmr_1000ms:  DS 1             ; registro per il conteggio iniziale del timer1 da inserire nel TMR1L
    high_tmr_1000ms: DS 1             ; registro per il conteggio iniziale del timer1 da inserire nel TMR1H
    delta:	     DS 1             ; registro temporale che viene sommata o sottratta alle variabili caricate nel timer1 a seconda del pulsante ceh è stato premuto
    temp1:	     DS 1	      ; registro temporaneo per il controllo della variabile da caricare in TMR1L quando viene chiamata la funzione per aumentare la velocità di scorrimento dei led 
    temp2:	     DS 1	      ; registro temporaneo per il controllo della variabile da caricare in TMR1H quando viene chiamata la funzione per aumentare la velocità di scorrimento dei led 
; Reset vector
; Il vettore di reset è l'istruzione che viene eseguita per prima dopo un reset del microcontrollore.
; La direttiva CODE dichiara una sezione di codice da allocare in ROM.Un delta di 2 significa che 
; le istruzioni in questa sezione saranno allineate a parole di 2 byte

PSECT reset_vec,class=CODE,delta=2
reset_vec:
   pagesel	start			                   ; imposta la pagina della memoria di programma in cui si trova l'indirizzo della label start
   goto		start			                   ; salta all'indirizzo indicato dalla label start


; PROGRAMMA PRINCIPALE
PSECT MainCode,global,class=CODE,delta=2
start:
    ; Configurazione oscillatore interno
    banksel OSCCON                   ; banco di OSCCON                   
    movlw   01010001B                ; carica costante binaria 01011001 in w
    movwf   OSCCON                   ; copia w in OSCCON, con la combinazione dei bit 6-5-4, IRCF <2:0>, configuro la frequenza del clock interno a 2 MHz

    ; Abilitazione sorgenti di interrupt 
    banksel INTCON                   ; banco di INTCON
    movlw   11000000B                ; carica costante binaria 11000000 in w
    movwf   INTCON                   ; copia w in INTCON, setto il global interrupt enable e il peripheral interrupt enable

    ; Configurazione Timer1
    banksel T1CON                   ; banco di T1CON
    movlw   00110001B               ; carica costante binaraia 00110001 in w
    movwf   T1CON                   ; copia w in T1CON: bit-0 ovvero TMR1ON=1 abilita il timer1, bit-1 TMR1CS=0, seleziona come sorgente di clock quella interna(Fosc/4), 
                                    ;con i bit 5-4 T1CKPS<1:0> imposto un prescarler pari a 8, 
    clrf    TMR1L  
    clrf    TMR1H
    

    ; Configurazione PORTD come output
    banksel TRISD                   ; banco di TRISD
    clrf    TRISD                      ; in questo modo forzando tutti i bit a 0, configuro tutti i led come output 

    ; Configura PORTD
    banksel PORTD                   ; banco di PORTD
    movlw   0x01                      ; carica costante esadecimale 0x01(00000001 in binario) in w, per accendere il primo led 
    movwf   PORTD                     ; copia w in PORTD
    
    ; Configurazione interrupt
    banksel PIR1                    ; banco di PIR1
    clrf    PIR1                       ; Azzera tutti i flag
    
    banksel PIE1                    ; banco di PIE1
    movlw   00100001B                 ; carica costante binaria 00100001 in w, per abilitare le richieste di interrupt dell'usart in ricezione e quelle generate dall'overflow del timer1 
    movwf   PIE1                      ; copia w in PIE1
      
    ;Configurazione USART
    banksel TXSTA                   ; banco di TXSTA
    movlw   00000110B                 ; carica costante binaria 00000110 in w. Azzera il bit SYNC in modo tale che la porta seriale lavori in modalità asincrona, mentre setta il bit BRGH(high speed) 
    movwf   TXSTA                     ; copia w in TXSTA
    
    banksel RCSTA                   ; banco di RCSTA
    movlw   10010000B                 ; carica costante binaria 10010000 in w. Setta il bit SPEN, abilitando il bit di abilitazione della porta seriale, setta il bit CREN, abilitando la ricezione in modalità asincrona 
    movwf   RCSTA                     ; copia w in RCSTA
    
    banksel BAUDCTL                 ; banco di BAUDCTL
    clrf    BAUDCTL                    ; azzera il bit BRG16, quindi utilizza un generatore di baud rate a 8 bit
    
    banksel SPBRG                   ; banco di SPBRG
    movlw   12                        ; carica 12(valore ricavato dalle tabelle del datasheet) in w, per avere un baud rate pari a 9600
    movwf   SPBRG                     ; copia w in SPBRG
    
    ; Inizializza il registro per la rotazione LED
    banksel output_led		  ; seleziona il banco di memoria che contiene il registro chiamato output_led
    movlw   0x01                  ; carica costante esadecimale 0x01(00000001 in binario) in w
    movwf   output_led		  ; copia w in output_led per accendere il primo led 
    
    banksel pause_flag		  ; seleziona il banco di memoria che contiene il registro chiamato pause_flag
    clrf    pause_flag		  ; azzero il registro pause_flag
    
    banksel direction		  ; seleziona il banco di memoria che contiene il registro chiamato direction
    clrf    direction		  ; azzero il registro direction
    
    banksel low_tmr_1000ms        ; seleziona il banco di memoria che contiene il registro chiamato low_tmr_1000ms    
    movlw   128			  ; carica costante decimale 128 (10000000 in binario) in w
    movwf   low_tmr_1000ms	  ; copia w in low_tmr_1000ms per far avviare il conteggio del timer1 da 128 invece che da 0
    
    banksel high_tmr_1000ms	  ; seleziona il bando di memoria che contiene il registro chiamatao high_tmr_1000ms
    movlw   128			  ; carica costante decimale 128 (10000000 in binario) in w
    movwf   high_tmr_1000ms	  ; copia w in high_tmr_1000ms per far avviare il contegio del timer 1 da 128 invece che da 0
    
    banksel delta                 ; seleziona il banco di memoria che contiene il registro delta
    movlw   25			  ; carica costante decimale 25 (11001 in binario) in w
    movwf   delta		  ; copia w in delta, che servirà per aumentare o diminuire il conteggio del timer1 e di conseguenza variare la velocità di scorrimento dei led
    
    
    
main_loop:
    goto main_loop                ; Loop principale (gli interrupt gestiscono il resto)

; Funzione MOVE_LED: Rotazione dei LED
MOVE_LED:
    banksel pause_flag		  ; Seleziona il banco in cui si trova pause_flag
    btfsc   pause_flag, 0	  ; Salta l'istruzione successiva se il bit 0 di pause_flag è 0
    return			  ; Se il primo bit del registro pause_flag è 1, esegue il return e passa il controllo alla cpu,
; se il primo bit è 0 allora continua con l'esecuzione delle seguenti istruzioni 
    banksel direction		  ; seleziona il banco di memoria che contiene il registro chiamato direction
    movf    direction, w	  ; copia il contenuto del registro direction in w
    btfsc   STATUS,STATUS_Z_POSITION    ; Se Z=0 (il registro direction contiene un valore diverso da 0) salta la prossima istruzione e esegui lo shift a destra
    goto    shift_left		  ; Altrimenti, esegui lo shift a sinistra 

shift_right:
    bcf	    STATUS, STATUS_C_POSITION ; Azzeramento carry
    rrf	    output_led, f             ; Shift a destra con carry
    btfss   output_led, 0	      ; Se il bit 0 del registro output_led è acceso, salta la prossima istruzione(perchè devo riniziare lo scorrimento verso sinistra)
    goto    led_ok		      ; chiama la funzione led_ok
    
    movlw   0x01		    ; carica il valore esadecimale 0x01(in binario 00000001) in w
    movwf   output_led		    ; copia w nel registro output_led
    banksel direction		    ; seleziona il banco di memoria in cui si trova il registro direction
    clrf    direction               ; azzera tutti i bit del registro direction per far si che lo scorrimento dei led riprenda verso siinistra, a seguito della chiamata della funzione led_ok
    goto    led_ok		    ; chiama la funzione led_ok

shift_left:			  ; funzione che esgue lo scorrimento verso sinistra dei led 
    bcf STATUS, STATUS_C_POSITION ; Azzeramento carry
    rlf output_led, f             ; Shift a sinistra con carry
    btfss output_led, 4           ; Se il 4 bit di output_led è uguale a 1, ovvero il quarto led è acceso, allora salta la prossima istruzine 
    goto led_ok			  ; vai a led_ok
    ; Cambia direzione a destra
    movlw 00000100		  ; carica costante binaria 00000100 in w 
    movwf output_led		  ; copia il contenuto di w nel registro output_led 
    banksel direction             ; seleziona il banco di memoria in cui è contenuto il registro direction
    movlw 0x01			  ; carica la costante esadecimale 0x01(in binario 00000001) in w
    movwf direction               ; copia il contenuto di w nel registro direction

led_ok:				  ; funzione che accende il led in seguiro allo scorrimento 
    movf    output_led, w         ; copia il contenuro di output_led in w
    banksel PORTD		  ; seleziona il banco di memoria in cui è situato il registro PORTD
    movwf   PORTD		  ; carica w in PORTD accendendo il led consono
    return			  ; esci da led_ok e ricarica il timer1

; Funzione RELOAD_TIMER1: Ricarica il timer1, per gestire lo scorrimento dei led
reload_timer1:
    banksel T1CON		  ; seleziona il banco di memoria in cui è contenuto il registro T1CON
    bcf T1CON, T1CON_TMR1ON_POSITION  ; azzera il bit TMR1ON per arrestare il timer1

    banksel low_tmr_1000ms	   ; seleziona il banco di memoria in cui si trova il registro low_tmr_1000ms
    movf low_tmr_1000ms, w	   ; copia il valore contenuto nel registro low_tmr_1000ms in w
    movwf TMR1L                    ; carica il valore contenuto in w dentro il registro TMR1L

    banksel high_tmr_1000ms	   ; seleziona il banco di memoria in cui si trova il registro high_tmr_1000ms
    movf high_tmr_1000ms, w	   ; copia il valore contenuto nel registro high_tmr_1000ms in w
    movwf TMR1H                    ; carica il valore contenuto in w dentro il registro TMR1H

    banksel PIR1		   ; seleziona il banco di memoria in cui si trova il regsitro PIR1
    bcf PIR1, PIR1_TMR1IF_POSITION ; azzera il bit di flag del timer1

    banksel T1CON		   ; seleziona il banco di memoria in cui si trova il registro T1CON
    bsf T1CON, T1CON_TMR1ON_POSITION ; setta il bit TMR1ON per abilitare il timer1
    return			    ; ritorna dove è stata chiamata la funzione


; Funzione per stoppare lo scorrimento dei led
pausa:
    banksel T1CON		    ; seleziona il banco di memoria in cui è contenuto il registro T1CON
    bcf T1CON, T1CON_TMR1ON_POSITION  ; azzera il bit TMR1ON per arrestare il timer1
    banksel pause_flag		    ; seleziona il banco di memoria in cui si trova il registro pause_flag
    movlw 1			    ; carica la variabile decimale 1 in w
    movwf pause_flag                ; copia il valore di w nel registro pause_flag
    banksel PIR1		    ; Seleziona il banco di memoria in cui è contenuto il registro PIR1
    bcf PIR1, PIR1_RCIF_POSITION    ; azzera l'interrupt flag della ricezione usart
    return			    ; esce dalla funzione aspettando una nuova richiesta di interrupt

; Funzione per riprendere lo scorrimento dei led
restart:                      
    banksel pause_flag		    ; seleziona il banco di memoria in cui è contenuto il registro pause_flag
    clrf pause_flag		    ; azzera il registro pause_flag
    banksel PIR1		    ; Seleziona il banco di memoria in cui è contenuto il registro PIR1
    bcf PIR1, PIR1_RCIF_POSITION    ; azzera il bit RCIF, interrupt flag della ricezione usart
    banksel T1CON		    ; seleziona il banco di memoria in cui si trova il registro T1CON
    bsf T1CON, T1CON_TMR1ON_POSITION  ; setta il bit TMR1ON e fa riprendere il conteggio del timer1
    return

; Funzione: accelera_shift_led
; Incrementa le variabili low_tmr_1000ms e high_tmr_1000ms
; Controlla se superano 228 e le configura di conseguenza
accelera_shift_led:
    banksel T1CON		  ; seleziona il banco di memoria in cui è contenuto il registro T1CON
    bcf T1CON, T1CON_TMR1ON_POSITION  ; azzera il bit TMR1ON per arrestare il timer1
    ; Controllo della pausa
    banksel pause_flag        ; Seleziona il banco di memoria in cui si trova pause_flag
    btfsc pause_flag, 0       ; Salta l'istruzione successiva se il bit 0 di pause_flag è 0
    return                    ; Se il primo bit del registro pause_flag è 1, esegue il return e passa il controllo alla cpu,
; se il primo bit è 0 allora continua con l'esecuzione delle seguenti istruzioni 
    ; Incremento di low_tmr_1000ms
    banksel low_tmr_1000ms    ; Seleziona il banco di memoria in cui si trova il registro low_tmr_1000ms
    movf low_tmr_1000ms, w    ; copia il contenuto del registro low_tmr_1000ms in w
    addwf delta, w            ; somma il contenuto di delta a w e salva il risultato in w
    movwf temp1               ; copia il contenuto di w nel registro temp1

    ; Controlla se temp1 supera 228
    movlw 228                 ; copia la variabile decimale 228 in w
    subwf temp1, w            ; sottrai 228 a temp1 e copia il risultato in w
    btfsc STATUS,STATUS_C_POSITION           ; l'istruzione subwf f,d setta il bit C del registro status nel caso in cui 
   ;la sottrazione ha risultato maggiore o uguale di 0, oppure azzera il bit C se la sottrazione ha risultato negativo,
   ;quindi se il bit C è 0(risultato negativo) salta la prossima istruzione, altrimenti esegui la prossima istruzione
    goto configura_low        ; nel caso in cui C=1, chiama la funzione configura_low

   ; Se C=0, esegui le seguenti istruzioni
    movf temp1, w	      ; copia il contenuto del registro temp1 in w
    movwf low_tmr_1000ms      ; carica il contenuto di w nel registro low_tmr_1000ms
    goto check_high           ; chiama la funzione check_high per impostare il valore da caricare nel registro TMR1H

configura_low:		      ; funzione che viene eseguita quando la sottrazione ha un risultato minore di 0, per impostare il tempo di scorrimento massimo ovvero la velocità di scorrimento minima
    movlw 228		      ; copia la costante decimale 228 in w
    movwf low_tmr_1000ms      ; carica il contenuto di w nel registro low_tmr_1000ms

check_high:
    ; Incremento di high_tmr_1000ms
    banksel high_tmr_1000ms   ; Seleziona il banco di memoria in cui si trova il registro high_tmr_1000ms
    movf high_tmr_1000ms, w   ; copia il contenuto del registro high_tmr_1000ms in w
    addwf delta, w            ; somma il contenuto di delta a w e salva il risultato in w
    movwf temp2               ; copia il contenuto di w nel registro temp2

    ; Controlla se temp2 supera 228
    movlw 228                 ; copia la variabile decimale 228 in w
    subwf temp2, w	      ; sottrai 228 a temp2 e copia il risultato in w
    btfsc STATUS,STATUS_C_POSITION           ; l'istruzione subwf f,d setta il bit C del registro status nel caso in cui 
   ;la sottrazione ha risultato maggiore o uguale di 0, oppure azzera il bit C se la sottrazione ha risultato negativo,
   ;quindi se il bit C è 0(risultato negativo) salta la prossima istruzione, altrimenti esegui la prossima istruzione
    goto configura_high       ; nel caso in cui C=1, chiama la funzione configura_high

    ; Se C=0, esegui le seguenti istruzioni
    movf temp2, w	    ; copia il contenuto del registro temp2 in w
    movwf high_tmr_1000ms   ; carica il contenuto di w nel registro high_tmr_1000ms
    goto reload_timer1      ; chiama la funzione reload_timer1

configura_high:		    ;funzione che viene eseguita quando la sottrazione ha un risultato minore di 0, per impostare il tempo di scorrimento massimo ovvero la velocità di scorrimento minima
    movlw 228                ; copia la costante decimale 228 in w
    movwf high_tmr_1000ms    ; carica il contenuto di w nel registro low_tmr_1000ms
    call reload_timer1	     ; chiama la funzione reload_timer1
    return		     ; ripassa il controllo alla cpu, aspettando una nuova richiesta di interrupt 

; Funzione: rallenta_shift_led
; Descrizione: Decrementa i timer high_tmr_1000ms e low_tmr_1000ms di delta.
; Se il risultato è minore di 0, li imposta entrambi a 0.

rallenta_shift_led:
    banksel T1CON		  ; seleziona il banco di memoria in cui è contenuto il registro T1CON
    bcf T1CON, T1CON_TMR1ON_POSITION  ; azzera il bit TMR1ON per arrestare il timer1
    banksel pause_flag        
    btfsc pause_flag, 0       
    return                    
; Decrementa low_tmr_1000ms
    banksel low_tmr_1000ms       
    movf delta, w       
    subwf low_tmr_1000ms, w               
    btfss STATUS,STATUS_C_POSITION             
    movlw 0               
    movwf low_tmr_1000ms         
    
    ; Decrementa high_tmr_1000ms se necessario
    banksel high_tmr_1000ms      
    movf delta, w      
    subwf high_tmr_1000ms, w               
    btfss STATUS,STATUS_C_POSITION              
    movlw 0              
    movwf high_tmr_1000ms        
    call reload_timer1
    return

    
; Gestione interrupt
PSECT isrVec,class=CODE,delta=2    ;PCSECT definisc euna nuova sezione di memoria nel codice assmbly
                                   ;isrVec è il nome della sezione, in questa sezione è contentuto il codice di ISR del codice
                                   ;class=CODE sta a significare che la sezione appartiene alla classe code, dove ci sono le istruzioni del codice
                                   ;il delta significa che le istruzionoi daranno allineate a parloe di 2 byte
isr:
    movwf w_temp                   ; Salva registro W
    swapf STATUS, w
    movwf status_temp              ; Salva STATUS
    movf PCLATH, w
    movwf pclath_temp              ; Salva PCLATH

test_timer1:
    banksel PIR1
    btfss PIR1, PIR1_TMR1IF_POSITION
    goto test_usart                ; Se non è Timer1, controlla se l'interrupt è stato generato dall'usart 
    call MOVE_LED                  ; Ruota i LED
    call reload_timer1             ; Ricarica il timer1             

test_usart:    ;controllo se l'interrupt è stato generato dalla porta seriale
    banksel PIR1         ;registro 
    btfss PIR1,PIR1_RCIF_POSITION
    goto irq_end
    banksel RCREG
    movf RCREG,w
    movwf tmp         ; memorizza byte ricevuto in "tmp"
    ; interpretazione comando
    movlw 'p'
    subwf tmp,w
    btfsc STATUS,STATUS_Z_POSITION    ; confronta tmp con 'p'
    call pausa   ; se uguale, chiama pausa
    movlw 'r'
    subwf tmp,w
    btfsc STATUS,STATUS_Z_POSITION    ; confronta tmp con 'r'
    call restart                      ;se uguale chiama restart
    movlw '+'
    subwf tmp,w
    btfsc STATUS,STATUS_Z_POSITION    ; confronta tmp con '+'
    call accelera_shift_led  ; se uguale, chiama accelera_shift_led
    movlw '-'
    subwf tmp,w
    btfsc STATUS,STATUS_Z_POSITION    ; confronta tmp con '-'
    call rallenta_shift_led   ; se uguale, chiama rallensta_shift_led
    goto irq_end
    

irq_end:
    ; Ripristina registri
    swapf status_temp, w
    movwf STATUS
    swapf w_temp, f
    swapf w_temp, w
    retfie

END reset_vec         ;direttiva di fine codice
